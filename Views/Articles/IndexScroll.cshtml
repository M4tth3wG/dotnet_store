@model IEnumerable<DotNet_lab_lista_10.Models.Article>

@{
    ViewData["Title"] = "Index";
}

<h1>Articles</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table" id="articles-table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Price)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Image)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Category)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                @if (!string.IsNullOrEmpty(item.Image))
                {
                        <img src="~/uploads/@item.Image" alt="Image" style="width: 50px; height: 50px;" />
                }
                else
                {
                        <img src="~/images/noPhoto.jpg" alt="Default Image" style="width: 50px; height: 50px;" />
                }
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Category.Name)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>

<span id="end-of-articles"></span>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }


    <script>
        var page_index = 1;
        var hasEntered = true;

        let observer = new IntersectionObserver(function (entries, observer) {
            hasEntered = !hasEntered;
            
            if (hasEntered) {
                loadNextArticles(@ViewBag.NumberOfItems);
            }
        });

        let end = document.getElementById("end-of-articles");
        observer.observe(end);

        /*function loadNextArticles(numberOfItems) {
            $.ajax({
                type: "GET",
                url: "/api/articles/nextpage/" + `${page_index},${numberOfItems}`,
                success: function (list, textStatus, jqXHR) {  // codes 200..299
                    if (jqXHR.status === 204) { // 204 No Content, so NULL
                        window.alert("No more elements");
                        return;
                    }
                    console.warn(`${page_index}`);
                    page_index++;
                    addItems(list);
                }
            })
                .fail(function (jqXHR, textStatus) { // codes 400..499
                    console.warn("Recived " + jqXHR.status + " in response code.");
                });
        }*/

        function addItems(list) {
            let table = document.getElementById("articles-table");

            for (item of list) {
                let row = table.insertRow();
                row.insertCell().innerHTML = item.name;
                row.insertCell().innerHTML = item.price.toFixed(2);

                let image = item.image;
                var imageHtml;

                if (image == null) {
                    imageHtml = `<img src="/images/noPhoto.jpg" alt="Default Image" style="width: 50px; height: 50px; " />`;
                }
                else {
                    imageHtml = `<img src="/uploads/${image} alt="Image" style="width: 50px; height: 50px;" />`;
                }

                row.insertCell().innerHTML = imageHtml;
                row.insertCell().innerHTML = item.category.name;
                row.insertCell().innerHTML = `<a href="/Articles/Edit/${item.id}">Edit</a>` +
                    " | " + `<a href="/Articles/Details/${item.id}">Details</a>` +
                    " | " + `<a href="/Articles/Delete/${item.id}">Delete</a>`;
            }
        }
        
        function loadNextArticles(numberOfItems) {
            const xhr = new XMLHttpRequest();
            xhr.onload = function () {
                if (this.status === 200) {
                    try {
                        const list = JSON.parse(this.responseText);
                        addItems(list);
                        page_index++;
                    } catch (e) {
                        console.warn('There was an error in JSON. Could not parse.');
                    }
                } else if (this.status === 204) { // 204 No Content, so NULL
                    window.alert("No more elements");
                } else {
                    console.warn("Recived " + this.status + " in response code.");
                }
            };
            let id = document.getElementById("id");
            let str = "/api/articles/nextpage/" + `${page_index},${numberOfItems}`;
            console.log(str);

            xhr.open("get", str);
            xhr.send();
        }
    </script>
}
